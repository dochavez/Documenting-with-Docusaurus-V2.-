(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),o=n(6),i=(n(0),n(90)),a={id:"doc2",title:"API"},s={unversionedId:"doc2",id:"doc2",isDocsHomePage:!1,title:"API",description:"API and Extension Specification Repository.",source:"@site/docs\\doc2.md",slug:"/doc2",permalink:"/Documenting-with-Docusaurus-V2.-/docs/doc2",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/doc2.md",version:"current",sidebar:"someSidebar",previous:{title:"Openxr",permalink:"/Documenting-with-Docusaurus-V2.-/docs/"},next:{title:"Installation for Windows",permalink:"/Documenting-with-Docusaurus-V2.-/docs/doc5"}},c=[{value:"API and Extension Specification Repository.",id:"api-and-extension-specification-repository",children:[]},{value:"KhronosGroup/OpenXR-SDK.",id:"khronosgroupopenxr-sdk",children:[]},{value:"KhronosGroup/OpenXR-SDK-Source.",id:"khronosgroupopenxr-sdk-source",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"api-and-extension-specification-repository"},"API and Extension Specification Repository."),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/KhronosGroup/OpenXR-Docs"}),"OpenXR-Docs")," repository contains the AsciiDoc source for the OpenXR API specification, and for registered OpenXR API extensions."),Object(i.b)("p",null,"OpenXR-Docs also contains the generated header files, API Registry xr.xml, and scripts for spec building and verification."),Object(i.b)("p",null,"Header Files\nFor most developers, the header files provided with the generated loader source in the OpenXR-SDK GitHub repository is all that's needed."),Object(i.b)("p",null,"However, all OpenXR headers provided by Khronos are ultimately obtained from the OpenXR-Docs repository. If you need to generate a customized version of the headers and/or loader, use the API Registry xr.xml in OpenXR-SDK-Source or OpenXR-Docs as required, together with the scripts in specification/scripts and/or src/scripts."),Object(i.b)("h4",{id:"api-registry"},"API Registry."),Object(i.b)("p",null,"OpenXR defines an API Registry for the API and extensions, formally defining function prototypes, structures, enumerants, and many other aspects of the API and extension mechanisms. The OpenXR Registry is used for many more purposes than most other Khronos API registries, and is the basis for generating the header files; AsciiDoc include files used in the Specification, and reference pages for interface definitions, parameter and member validity language, and synchronization language; and more."),Object(i.b)("p",null,"The canonical location for the registry is the OpenXR-Docs repository in ",Object(i.b)("inlineCode",{parentName:"p"},"specification/registry/xr.xml"),', and that is where any changes should be submitted. "Read-only" copies, regularly synchronized, exist in the same relative path in:'),Object(i.b)("p",null,"the OpenXR-SDK repository, for optional, custom code generation by an application. None of the associated scripts are included in this repository, and all generated files are pre-generated, so changes to the XML here do not have any effect except on any custom scripts that might be written explicitly to consume the XML.\nthe OpenXR-SDK-Source repository, for header generation, loader and API layer source generation, and loader documentation generation. Changes to the XML here affect all these generated files and libraries."),Object(i.b)("h3",{id:"khronosgroupopenxr-sdk"},"KhronosGroup/OpenXR-SDK."),Object(i.b)("p",null,"The OpenXR-SDK repository contains:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"all OpenXR header files (generated and static)"),Object(i.b)("li",{parentName:"ul"},"source code and CMake build system for the OpenXR loader that is used for Linux and Windows"),Object(i.b)("li",{parentName:"ul"},"all generated source files required to build the loader"),Object(i.b)("li",{parentName:"ul"},"rendered HTML of the loader design doc (in doc/loader/)"),Object(i.b)("li",{parentName:"ul"},"a copy of the XML registry, for optional custom code generation usage")),Object(i.b)("p",null,"Most application developers can use this repository, as it provides the header and loader with minimum dependencies, with no requirement for code generation at build time. It is designed for inclusion in your application's source tree, as the loader model for OpenXR on Windows is to bundle the loader (whether statically or dynamically linked) with your application, rather than installing system-wide."),Object(i.b)("p",null,"This repository contains a subset of the OpenXR-SDK-Source repository (only the loader source), with the generated source code files pre-generated for easier usage. If you're looking for API layers, sample code, etc."),Object(i.b)("h3",{id:"khronosgroupopenxr-sdk-source"},"KhronosGroup/OpenXR-SDK-Source."),Object(i.b)("p",null,"The OpenXR-SDK-Source repository contains:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the static OpenXR header file ",Object(i.b)("inlineCode",{parentName:"li"},"openxr_platform_defines.h")),Object(i.b)("li",{parentName:"ul"},"source code and CMake build system for",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"the OpenXR loader that is used for Linux and Windows"),Object(i.b)("li",{parentName:"ul"},'two "beta" API layers, ',Object(i.b)("inlineCode",{parentName:"li"},"XR_LUNARG_core_validation")," and ",Object(i.b)("inlineCode",{parentName:"li"},"XR_LUNARG_api_dump")),Object(i.b)("li",{parentName:"ul"},"the ",Object(i.b)("inlineCode",{parentName:"li"},"hello_xr")," sample application"),Object(i.b)("li",{parentName:"ul"},"tests for the loader"))),Object(i.b)("li",{parentName:"ul"},"a copy of the XML registry, for required code generation usage"),Object(i.b)("li",{parentName:"ul"},"code generation scripts (in Python 3) required for the loader, API layers, and tests"),Object(i.b)("li",{parentName:"ul"},"the loader design document source (in Asciidoctor) and the scripts required to build it")),Object(i.b)("p",null,"OpenXR-SDK-Source is where development of the loader takes place: changes are migrated to OpenXR-SDK regularly. Unlike that repo, it does not contain the generated headers or source: you need Python 3.6 or newer on your system to compile this repository."))}p.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,b=d["".concat(a,".").concat(h)]||d[h]||u[h]||i;return n?o.a.createElement(b,s(s({ref:t},l),{},{components:n})):o.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);